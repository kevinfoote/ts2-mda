<?xml version="1.0" encoding="UTF-8"?>

<!--
	TestShib Federation metadata processing. 
	
	* "ant process" .. generates 3 files: 
                testshib-md-aggregate.xml
                testshib-md-archive.xml
                testshib-md-providers.xml
	  
	* "ant sign" .. this will someday produce 
               signed metadat using the above files.

-->
<project default="process">

        <!--
        Java memory requirements.
        
        This is used as the max heap setting for all Java invocations.  This amount will
        be more than some invocations require, but there's no harm in having a higher
        limit for all of them.
        -->
	<property name="java.max.memory" value="128m"/>
    
	<!--
		Local specialised directories.
	-->
        <property name="mdx.dir" value="${basedir}/mdx"/>
	<property name="xml.dir" value="${basedir}/xml"/>

	<!--
		Location of externally supplied tool bundles.
	-->
	<property name="tools.dir" value="tools"/>
	<property name="tools.ant" value="${tools.dir}/ant"/>
	<property name="tools.mda" value="${tools.dir}/aggregator-cli-0.8.0"/>
        <property name="tools.mdnorm" value="${tools.dir}/mdnorm"/>
	<property name="tools.metadatatool" value="${tools.dir}/metadatatool"/>
	<property name="tools.xmlsectool" value="${tools.dir}/xmlsectool"/>
	<property name="tools.xalan" value="${tools.dir}/xalan"/>
	
	<!--
		Additional ANT task definitions.
	-->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${tools.ant}/lib/ant-contrib-1.0b3.jar"/>
		</classpath>
	</taskdef>
	
	<!--
                Metadata stream files: 

		Each stream has its own unsigned file, as follows:
	-->
	<property name="md.prod.unsigned"        value="testshib-md-aggregate.xml"/>
	<property name="md.archive.unsigned"     value="testshib-md-archive.xml"/>
	<property name="md.providers.unsigned"   value="testshib-md-providers.xml"/>
	
	<!--
		Each stream has its own signed file. (IF WE GET THAT FAR)
	-->
	<property name="md.prod.signed"        value="testshib-md-aggregate-signed.xml"/>
	<property name="md.archive.signed"     value="testshib-md-archive-signed.xml"/>
	<property name="md.providers.signed"   value="testshib-md-providers-signed.xml"/>
	
	<!--
		Null device location.
	-->
	<condition property="null.device"
		value="nul:" else="/dev/null">
		<os family="windows"/>
	</condition>

	<!--
		*************************************************
		***   E N T R Y   P O I N T   T A R G E T S   ***
		*************************************************
	-->
	
	<!--
		Standard processing: generate, verify.
	-->
	<target name="process" depends="generate, verify">
		<echo>Processing complete.</echo>
	</target>
	
	<!--
		*************************************************
		***   M E T A D A T A   G E N E R A T I O N   ***
		*************************************************
	-->
	
	<!--
		Generate unsigned metadata.
	-->
        <target name="generate" depends="gen.testshib.unsigned">
              <echo>Generated unsigned metadata.</echo>
        </target>
	
	<!--
	    flow.uk.verify
	    
	    Runs the MDA on the uk channel's verify verb to verify that the UK-registered
	    metadata passes all the checks that would be imposed during a signing run.
	    
	    No output files are produced by this operation.
	-->
	<target name="flow.uk.verify">
            <CHANNEL.do channel="uk" verb="verify"/>
	</target>
    
        <!--
        Unsigned metadata generation for the UK Federation.
        -->
        <target name="gen.testshib.unsigned">
            <echo>Generating unsigned TESTSHIB metadata files.</echo>
		
        <!--
        Call the generate verb in the testshib mdx channel to generate the following:
        production aggregate(s)
        -->
        <CHANNEL.do channel="testshib" verb="generate"/>
		
        <!--
        Post-process mda-generated output files.
        -->
        <MDNORM i="${xml.dir}/${md.prod.unsigned}"/>
        <MDNORM i="${xml.dir}/${md.archive.unsigned}"/>
        <MDNORM i="${xml.dir}/${md.providers.unsigned}"/>
		
            <echo>Generated UK unsigned metadata.</echo>
        </target>

	<!--
	    ***************************
	    ***   M D A   T O O L   ***
	    ***************************
	-->
	
	<!--
	    Macro to run the mda (metadata aggregator CLI) tool.
        -->
    <macrodef name="MDA">
    	<!-- Spring pipeline configuration file -->
    	<attribute name="config"/>
    	<!-- pipeline bean ID -->
    	<attribute name="pipeline"/>
        <sequential>
            <java classname="net.shibboleth.metadata.cli.SimpleCommandLine"
                fork="true" failonerror="true" maxmemory="${java.max.memory}">
                <classpath>
                	<!-- Spring "classpath:" imports can be under the MDX directory --> 
                	<pathelement path="${mdx.dir}"/>
                	
                	<!-- Include all APIs we may want to use. -->
                    <fileset dir="${tools.mda}/lib">
                        <include name="*.jar"/>
                    </fileset>
                	<fileset dir="${tools.dir}/ukf-mda">
                		<include name="*.jar"/>
                	</fileset>
                	<fileset dir="${tools.dir}/xalan/lib">
                		<include name="sdss-xalan-md-*.jar"/>
                	</fileset>
                    <fileset dir="${tools.dir}/xalan/lib">
                        <include name="ukf-members-*.jar"/>
                    </fileset>
                </classpath>
                <jvmarg value="-Djava.endorsed.dirs=${tools.mda}/lib/endorsed"/>
            	<jvmarg value="-Dbasedir=${basedir}"/>
            	<jvmarg value="-Drulesdir=${rules.dir}"/>
            	<jvmarg value="-enableassertions"/>
            	<arg value="--quiet"/>
            	<arg value="@{config}"/>
            	<arg value="@{pipeline}"/>
            </java>
        </sequential>
    </macrodef>
    
    <!--
        *********************************
        ***   M D N O R M   T O O L   ***
        *********************************
    -->
    
	<!--
	    MDNORM
	    
	    Macro to call tool to perform textual normalisation on an XML file
	    containing a metadata aggregate.
        
        Parameter 'i' is the file to be normalised; no assumption is made
        about its location so this must contain a full path.
	-->
    <macrodef name="MDNORM">
        <attribute name="i"/><!-- input file -->
        <element name="args" optional="yes"/>
        <sequential>
            <java fork="true" maxmemory="${java.max.memory}" failonerror="true" classname="uk.org.ukfederation.mdnorm.Normalise">
                <classpath>
                    <fileset dir="${tools.mdnorm}/lib">
                        <include name="*.jar"/>
                    </fileset>
                </classpath>
                <args/>
                <arg value="@{i}"/>
            </java>
        </sequential>
    </macrodef>

    <!--
        MDNORM.noblank
        
        Call MDNORM but discard blank lines from the output.
    -->
    <macrodef name="MDNORM.noblank">
        <attribute name="i"/><!-- input file -->
        <sequential>
            <MDNORM i="@{i}">
                <args>
                    <arg value="--discardBlankLines"/>
                </args>
            </MDNORM>
        </sequential>
    </macrodef>

	<!--
		*********************************************
		***   M E T A D A T A T O O L   T O O L   ***
		*********************************************
	-->
	
	<!--
		Macro to run the metadatatool application with appropriate defaults.
	-->
	<macrodef name="MDT">
		<attribute name="i"/><!-- input file, assumed to be in the XML directory -->
		<attribute name="o"/><!-- output file location -->
		<attribute name="keystore"/><!-- keystore file location -->
		<attribute name="storetype" default="JKS"/><!-- type of keystore to use -->
		<attribute name="alias"/><!-- alias of key to use -->
		<element name="args" optional="yes"/>
		<sequential>
			<java classname="edu.internet2.middleware.shibboleth.utils.MetadataTool"
				fork="true" failonerror="true" maxmemory="${java.max.memory}">
				<classpath>
					<fileset dir="${tools.metadatatool}/lib">
						<include name="*.jar"/>
					</fileset>
				</classpath>
				<jvmarg value="-Djava.endorsed.dirs=${tools.metadatatool}/endorsed"/>
				<args/>
				<arg value="--keystore"/>
				<arg value="@{keystore}"/>
				<arg value="--storetype"/>
				<arg value="@{storetype}"/>
				<arg value="--alias"/>
				<arg value="@{alias}"/>
				<arg value="--in"/>
				<arg value="file:${xml.dir}/@{i}"/>
				<arg value="--out"/>
				<arg value="@{o}"/>
			</java>
		</sequential>
	</macrodef>
	
	<macrodef name="MDT.VFY.uk">
		<attribute name="i"/>
		<sequential>
            <MDT i="@{i}" o="${null.device}"
                keystore="${build.dir}/ukfederation-2012.jks"
                alias="${keystore.uk.vfy.alias}"/>
		</sequential>
	</macrodef>
		
	<!--
		*****************************************
		***   X M L S E C T O O L   T O O L   ***
		*****************************************
	-->
	
	<macrodef name="XMLSECTOOL">
		<attribute name="i"/><!-- input file, assumed to be in the XML directory -->
		<element name="args" optional="yes"/>
		<sequential>
			<java classname="edu.internet2.middleware.security.XmlSecTool"
				fork="true" failonerror="true" maxmemory="${java.max.memory}">
				<classpath>
					<fileset dir="${tools.xmlsectool}/lib">
						<include name="*.jar"/>
					</fileset>
				</classpath>
				<jvmarg value="-Djava.endorsed.dirs=${tools.xmlsectool}/lib/endorsed"/>
				<jvmarg value="-Dedu.internet2.middleware.security.XmlSecTool.home=${tools.xmlsectool}"/>
				<args/>
				<arg value="--validateSchema"/>
				<arg value="--schemaDirectory"/>
				<arg value="${xml.dir}"/>
				<arg value="--inFile"/>
				<arg value="${xml.dir}/@{i}"/>
			</java>
		</sequential>
	</macrodef>
	
	<macrodef name="XMLSECTOOL.SIGN.uk">
		<attribute name="i"/><!-- input file, assumed to be in the XML directory -->
		<attribute name="o"/><!-- output file, assumed to be in the XML directory -->
		<attribute name="digest"/><!-- digest function to use -->
		<sequential>
			<!-- delete the temporary file to be sure we don't use old data -->
			<delete file="${xml.dir}/temp.xml" quiet="true" verbose="false"/>
			
			<echo>Signing @{i} using digest @{digest}.</echo>
			
			<!-- perform signing operation into temporary file -->
			<XMLSECTOOL i="@{i}">
				<args>
					<arg value="--sign"/>
					
					<!-- set digest to use -->
					<arg value="--digest"/>
					<arg value="@{digest}"/>
					
					<!--
					    Sign using pkcs11Config with keystoreProvider
					   
					    This only works with XmlSecTool 1.2.0 and later.
					    It requires the java.security file to be unmodified.
					-->
                    <arg value="--pkcs11Config"/>
                    <arg value="${pkcs11.config}"/>
                    <arg value="--keystoreProvider"/>
                    <arg value="sun.security.pkcs11.SunPKCS11"/>
					
					<arg value="--key"/>
					<arg value="${keystore.uk.sign.alias}"/>
					<arg value="--keyPassword"/>
					<arg value="${keystore.pass}"/>
					<arg value="--outFile"/>
					<arg value="${xml.dir}/@{o}"/>
					<arg value="--referenceIdAttributeName"/>
					<arg value="ID"/>
					<!--
					<arg value="- -quiet"/>
					-->
				</args>
			</XMLSECTOOL>
			
			<!-- Force the output file to use Unix line endings -->
			<fixcrlf file="${xml.dir}/@{o}" eol="lf"/>

		</sequential>
	</macrodef>
	
	<macrodef name="XMLSECTOOL.VFY.uk">
		<attribute name="i"/><!-- input file, assumed to be in the XML directory -->
		<sequential>
            <XMLSECTOOL i="@{i}">
                <args>
                    <arg value="--verifySignature"/>
                    <arg value="--certificate"/>
                    <arg value="${build.dir}/ukfederation-2012.pem"/>
                    <!--
                    <arg value="- -quiet"/>
                    -->
                </args>
            </XMLSECTOOL>
		</sequential>
	</macrodef>
	
	<!--
		*******************************
		***   X A L A N   T O O L   ***
		*******************************
	-->
	
	<!--
		Macro to run the Xalan XSLT engine, taking files from arbitrary
		locations.
	-->
	<macrodef name="XALAN">
		<attribute name="i"/>
		<attribute name="o"/>
		<attribute name="x"/>
		<sequential>
			<java fork="true" maxmemory="${java.max.memory}" failonerror="true" classname="org.apache.xalan.xslt.Process">
				<classpath>
					<fileset dir="${tools.xalan}/lib">
						<include name="*.jar"/>
					</fileset>
				</classpath>
				<jvmarg value="-Djava.endorsed.dirs=${tools.xalan}/endorsed"/>
				<arg value="-IN"/>
				<arg value="@{i}"/>
				<arg value="-OUT"/>
				<arg value="@{o}"/>
				<arg value="-XSL"/>
				<arg value="@{x}"/>
			</java>
		</sequential>
	</macrodef>

    <!--
        Macro to run the Xalan XSLT engine, taking files from arbitrary
        locations.  No output specified, so the result of the transform
        will be sent to standard output.
    -->
    <macrodef name="XALAN.noout">
        <attribute name="i"/>
        <attribute name="x"/>
        <sequential>
            <java fork="true" maxmemory="${java.max.memory}" failonerror="true" classname="org.apache.xalan.xslt.Process">
                <classpath>
                    <fileset dir="${tools.xalan}/lib">
                        <include name="*.jar"/>
                    </fileset>
                </classpath>
                <jvmarg value="-Djava.endorsed.dirs=${tools.xalan}/endorsed"/>
                <arg value="-IN"/>
                <arg value="@{i}"/>
                <arg value="-XSL"/>
                <arg value="@{x}"/>
            </java>
        </sequential>
    </macrodef>

	
	<!--
		*****************************************
		***   M E T A D A T A   I M P O R T   ***
		*****************************************
	-->
	
	<target name="import.metadata">
		<echo>Importing metadata from ${entities.dir}/import.xml</echo>
        <delete file="${entities.dir}/imported.xml" quiet="true" verbose="false"/>
		<CHANNEL.do channel="uk" verb="import.metadata"/>
		<echo>Imported metadata to ${entities.dir}/imported.xml</echo>
        <fixcrlf file="${entities.dir}/imported.xml"/>
	</target>
	
    <!--
        *********************************************
        ***   M E T A D A T A   E X C H A N G E   ***
        *********************************************
    -->
	
	<!--
	    Aggregator based work is divided into channels, each of
	    which lives in a directory under /mdx/.  Each channel
	    can have a number of verbs which can be executed.
	    
	    Conventions for this system are documented in
	    /mdx/conventions.md.
	-->
	
	<!--
	    CHANNEL.do
	    
	    Run a particular flow in the named channel.
	-->
    <macrodef name="CHANNEL.do">
        <attribute name="channel"/><!-- channel name -->
    	<attribute name="verb"/><!-- verb to perform -->
        <sequential>
            <echo>Running @{channel} @{verb} flow.</echo>
        	<if>
        		<available file="${mdx.dir}/@{channel}/@{verb}.xml"/>
            	<then>
            	    <MDA config="${mdx.dir}/@{channel}/@{verb}.xml"
            	        pipeline="@{verb}"/>
            	</then>
            	<else>
                    <MDA config="${mdx.dir}/@{channel}/verbs.xml"
                        pipeline="@{verb}"/>
            	</else>
        	</if>
            <echo>Completed @{channel} @{verb} flow.</echo>
        </sequential>
    </macrodef>
	
    <!--
        flow
        
        Prompt for a channel name and a verb, and run that verb in that channel.
    -->
    <target name="flow">
        <input addproperty="channel">
            Please select the channel to use (e.g., us_incommon):
        </input>
        <input addproperty="verb">
            Please select the verb to execute (e.g., import):
        </input>
        <CHANNEL.do channel="${channel}" verb="${verb}"/>
    </target>
    
	<!--
	    CHANNEL.import
	    
	    Run the import flow from the named channel.
	-->
	<macrodef name="CHANNEL.import">
		<attribute name="channel"/><!-- channel name -->
		<sequential>
			<CHANNEL.do channel="@{channel}" verb="import"/>
		</sequential>
	</macrodef>
	
    <!--
        flow.importProduction.all
        
        Run the importProduction flow on each channel that has one.
        
        Exception: int_testshib, which is too large and anarchic to be worthwhile.
    -->
    <target name="flow.importProduction.all">
    	<CHANNEL.do verb="importProduction" channel="nz_tuakiri"/>
    	<CHANNEL.do verb="importProduction" channel="se_swamid"/>
    	<CHANNEL.do verb="importProduction" channel="si_arnes"/>
        <CHANNEL.do verb="importProduction" channel="us_incommon"/>
    </target>

    <!--
        flow.importRaw.all
	    
	Run the importRaw command for each channel in turn.
    -->
    <target name="flow.importRaw.all">
        <CHANNEL.do verb="importRaw" channel="int_testshib"/>
        <CHANNEL.do verb="importRaw" channel="nz_tuakiri"/>
        <CHANNEL.do verb="importRaw" channel="se_swamid"/>
        <CHANNEL.do verb="importRaw" channel="si_arnes"/>
        <CHANNEL.do verb="collect"   channel="uk"/>
        <CHANNEL.do verb="importRaw" channel="us_incommon"/>
    </target>
    
    <!--
        *********************************
        ***   U I I N F O   L I S T   ***
        *********************************
    -->
    
    <target name="uiinfo.list">
    	<CHANNEL.do channel="uk" verb="collect"/>
        <XALAN.noout i="${mdx.dir}/uk/collected.xml"
                     x="${build.dir}/list_uiinfo.xsl"/>
    </target>
    
    <!--
        *******************************
        ***   M D U I   S T A T S   ***
        *******************************
    -->
	
	<target name="mdui.stats">
        <input addproperty="channel">
            Please select the channel to use (e.g., us_incommon):
        </input>
		<if>
			<equals arg1="${channel}" arg2="uk"/>
			<then>
				<CHANNEL.do verb="collect" channel="uk"/>
                <XALAN.noout i="${mdx.dir}/uk/collected.xml"
                       x="${build.dir}/statistics_mdui.xsl"/>
			</then>
			<else>
			    <CHANNEL.do verb="importRaw" channel="${channel}"/>
                <XALAN.noout i="${mdx.dir}/${channel}/imported.xml"
                       x="${build.dir}/statistics_mdui.xsl"/>
			</else>
		</if>
	</target>
    
	<!--
		*******************************
		***   M I S C E L L A N Y   ***
		*******************************
	-->
	
	<!--
		Statistics generation
		
		Note that statistics are generated from the full registered fragment
		data, so that the statistics process has access to information that will not
		be included in published metadata.
		
		This target does stand-alone statistics generation; in normal use, the
		statistics are generated as a side-effect of the generate target.
	-->
	<target name="stats">
		<CHANNEL.do channel="uk" verb="statistics"/>
		<fixcrlf file="${xml.dir}/ukfederation-stats.html" eol="lf"/>
	</target>
	
	<!--
		Check mailing list against current metadata
	-->
	<target name="check.mailing.list" depends="flow.uk.collect">
		<echo>Checking mailing list entries.</echo>
		<exec executable="perl" dir="${build.dir}">
			<arg value="${build.dir}/addresses.pl"/>
		</exec>
	</target>
	
	<!--
		Extract TLS locations from the UK federation metadata.
	-->
	<target name="extract.locs" depends="flow.uk.collect">
		<echo>Extracting TLS locations</echo>
		<exec executable="perl" dir="${build.dir}"
			output="${build.dir}/locations.txt">
			<arg value="${build.dir}/extract_locs.pl"/>
		</exec>
	</target>
	
	<!--
		Extract authorities
	-->
	<target name="extract.authorities">
		<echo>Extracting key authorities</echo>
		<XALAN
			i="${mdx.dir}/uk/trust-roots.xml"
			o="${mdx.dir}/uk/authorities.pem"
			x="${mdx.dir}/uk/extract_authorities.xsl"/>
	</target>
	
	<!--
		Check authorities
	-->
	<target name="check.authorities">
		<echo>Checking authority certificates</echo>
		<exec executable="perl" dir="${mdx.dir}/uk"
			input="${mdx.dir}/uk/authorities.pem">
			<arg value="${mdx.dir}/uk/check_authorities.pl"/>
		</exec>
	</target>

	<!--
		Utility to fold overlong embedded certificates.
	-->
	<target name="fold.embedded.certs">
		<echo>Folding embedded certificates</echo>
		<for param="file">
			<path>
				<fileset dir="${entities.dir}" includes="uk*.xml"/>
			</path>
			<sequential>
				<exec executable="perl" dir="${entities.dir}">
					<arg value="-i"/>
					<arg value="${build.dir}/fold_cert.pl"/>
					<arg value="@{file}"/>
				</exec>
			</sequential>
		</for>
	</target>
	
	<!--
		Extract embedded certificates
	-->
	<target name="extract.embedded" depends="flow.uk.collect">
		<echo>Extracting embedded certificates</echo>
		<XALAN
			i="${uk.collected}"
			o="${xml.dir}/embedded.pem"
			x="${build.dir}/extract_embedded.xsl"/>
	</target>
	
	<!--
		Check embedded certificates.
	-->
	<target name="check.embedded" depends="extract.embedded">
		<echo>Checking embedded certificates</echo>
		<exec executable="perl" dir="${xml.dir}"
			input="${xml.dir}/embedded.pem">
			<arg value="${build.dir}/check_embedded.pl"/>
			<arg value="-q"/>
		</exec>
        <delete file="${xml.dir}/embedded.pem" quiet="true" verbose="false"/>
	</target>
	
	<!--
	   Check for IdPs using the single-port configuration.
	-->
	<target name="check.ports">
		<echo>Checking vhost use</echo>
        <CHANNEL.do verb="checkPorts" channel="uk"/>
        <echo>Checked.</echo>
	</target>
    
</project>
